/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type TradeConfigStruct = {
  offerId: BigNumberish;
  loanAmount: BigNumberish;
  duration: BigNumberish;
};

export type TradeConfigStructOutput = [BigNumber, BigNumber, BigNumber] & {
  offerId: BigNumber;
  loanAmount: BigNumber;
  duration: BigNumber;
};

export type DemandConfigStruct = {
  loanAmount: BigNumberish;
  fee: BigNumberish;
  superToken: string;
  collateralShare: BigNumberish;
  duration: BigNumberish;
};

export type DemandConfigStructOutput = [
  BigNumber,
  number,
  string,
  number,
  BigNumber
] & {
  loanAmount: BigNumber;
  fee: number;
  superToken: string;
  collateralShare: number;
  duration: BigNumber;
};

export type OfferConfigStruct = {
  loanMaxAmount: BigNumberish;
  loanMinAmount: BigNumberish;
  fee: BigNumberish;
  superToken: string;
  collateralShare: BigNumberish;
  maxDuration: BigNumberish;
  isInfinite: boolean;
  numberOfLoansOffered: BigNumberish;
  numberOfLoansTraded: BigNumberish;
};

export type OfferConfigStructOutput = [
  BigNumber,
  BigNumber,
  number,
  string,
  number,
  BigNumber,
  boolean,
  number,
  number
] & {
  loanMaxAmount: BigNumber;
  loanMinAmount: BigNumber;
  fee: number;
  superToken: string;
  collateralShare: number;
  maxDuration: BigNumber;
  isInfinite: boolean;
  numberOfLoansOffered: number;
  numberOfLoansTraded: number;
};

export interface LendingMarketPlaceInterface extends utils.Interface {
  functions: {
    "AcceptDemand()": FunctionFragment;
    "ETH()": FunctionFragment;
    "_gelatoTaskIdbyLoanClone(address)": FunctionFragment;
    "_loanIdByTaker(address)": FunctionFragment;
    "_loansDemandCounter()": FunctionFragment;
    "_loansOfferedCounter()": FunctionFragment;
    "_loansTradedById(uint256)": FunctionFragment;
    "_loansTradedCounter()": FunctionFragment;
    "acceptOffer((uint256,uint256,uint256))": FunctionFragment;
    "cancelTaskbyId(bytes32,address)": FunctionFragment;
    "checkerStopStream(uint256)": FunctionFragment;
    "demandLoan((uint256,uint16,address,uint16,int96))": FunctionFragment;
    "gelato()": FunctionFragment;
    "getMaths(uint256,uint16,uint256,uint16)": FunctionFragment;
    "offerLoan((uint256,uint256,uint16,address,uint16,uint256,bool,uint8,uint8))": FunctionFragment;
    "ops()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stopStream(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawContract()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "AcceptDemand",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_gelatoTaskIdbyLoanClone",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_loanIdByTaker",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "_loansDemandCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_loansOfferedCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_loansTradedById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_loansTradedCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptOffer",
    values: [TradeConfigStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelTaskbyId",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkerStopStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "demandLoan",
    values: [DemandConfigStruct]
  ): string;
  encodeFunctionData(functionFragment: "gelato", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMaths",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerLoan",
    values: [OfferConfigStruct]
  ): string;
  encodeFunctionData(functionFragment: "ops", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stopStream",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawContract",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "AcceptDemand",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_gelatoTaskIdbyLoanClone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_loanIdByTaker",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_loansDemandCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_loansOfferedCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_loansTradedById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_loansTradedCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelTaskbyId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkerStopStream",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "demandLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gelato", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMaths", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "offerLoan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ops", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stopStream", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawContract",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface LendingMarketPlace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LendingMarketPlaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AcceptDemand(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ETH(overrides?: CallOverrides): Promise<[string]>;

    _gelatoTaskIdbyLoanClone(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    _loanIdByTaker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _loansDemandCounter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    _loansOfferedCounter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    _loansTradedById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        string
      ] & {
        loanTradedId: BigNumber;
        fee: number;
        loanAmount: BigNumber;
        loanTotalAmount: BigNumber;
        collateral: BigNumber;
        collateralShare: number;
        flowRate: BigNumber;
        initTimestamp: BigNumber;
        duration: BigNumber;
        status: number;
        loanTaker: string;
        loanProvider: string;
        superToken: string;
        loanContract: string;
      }
    >;

    _loansTradedCounter(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    acceptOffer(
      _config: TradeConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cancelTaskbyId(
      _taskId: BytesLike,
      loanContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkerStopStream(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    demandLoan(
      config: DemandConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gelato(overrides?: CallOverrides): Promise<[string]>;

    getMaths(
      _loanAmount: BigNumberish,
      _fee: BigNumberish,
      _duration: BigNumberish,
      _collateralShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalLoanAmount: BigNumber;
        totalInflowRate: BigNumber;
        collateral: BigNumber;
      }
    >;

    offerLoan(
      config: OfferConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ops(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stopStream(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  AcceptDemand(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ETH(overrides?: CallOverrides): Promise<string>;

  _gelatoTaskIdbyLoanClone(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  _loanIdByTaker(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  _loansDemandCounter(overrides?: CallOverrides): Promise<BigNumber>;

  _loansOfferedCounter(overrides?: CallOverrides): Promise<BigNumber>;

  _loansTradedById(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      string,
      string,
      string,
      string
    ] & {
      loanTradedId: BigNumber;
      fee: number;
      loanAmount: BigNumber;
      loanTotalAmount: BigNumber;
      collateral: BigNumber;
      collateralShare: number;
      flowRate: BigNumber;
      initTimestamp: BigNumber;
      duration: BigNumber;
      status: number;
      loanTaker: string;
      loanProvider: string;
      superToken: string;
      loanContract: string;
    }
  >;

  _loansTradedCounter(overrides?: CallOverrides): Promise<BigNumber>;

  acceptOffer(
    _config: TradeConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cancelTaskbyId(
    _taskId: BytesLike,
    loanContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkerStopStream(
    loanId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

  demandLoan(
    config: DemandConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gelato(overrides?: CallOverrides): Promise<string>;

  getMaths(
    _loanAmount: BigNumberish,
    _fee: BigNumberish,
    _duration: BigNumberish,
    _collateralShare: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      totalLoanAmount: BigNumber;
      totalInflowRate: BigNumber;
      collateral: BigNumber;
    }
  >;

  offerLoan(
    config: OfferConfigStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ops(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stopStream(
    loanId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawContract(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AcceptDemand(overrides?: CallOverrides): Promise<void>;

    ETH(overrides?: CallOverrides): Promise<string>;

    _gelatoTaskIdbyLoanClone(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    _loanIdByTaker(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _loansDemandCounter(overrides?: CallOverrides): Promise<BigNumber>;

    _loansOfferedCounter(overrides?: CallOverrides): Promise<BigNumber>;

    _loansTradedById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        string
      ] & {
        loanTradedId: BigNumber;
        fee: number;
        loanAmount: BigNumber;
        loanTotalAmount: BigNumber;
        collateral: BigNumber;
        collateralShare: number;
        flowRate: BigNumber;
        initTimestamp: BigNumber;
        duration: BigNumber;
        status: number;
        loanTaker: string;
        loanProvider: string;
        superToken: string;
        loanContract: string;
      }
    >;

    _loansTradedCounter(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOffer(
      _config: TradeConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    cancelTaskbyId(
      _taskId: BytesLike,
      loanContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkerStopStream(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { canExec: boolean; execPayload: string }>;

    demandLoan(
      config: DemandConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    gelato(overrides?: CallOverrides): Promise<string>;

    getMaths(
      _loanAmount: BigNumberish,
      _fee: BigNumberish,
      _duration: BigNumberish,
      _collateralShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        totalLoanAmount: BigNumber;
        totalInflowRate: BigNumber;
        collateral: BigNumber;
      }
    >;

    offerLoan(
      config: OfferConfigStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    ops(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stopStream(loanId: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawContract(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    AcceptDemand(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ETH(overrides?: CallOverrides): Promise<BigNumber>;

    _gelatoTaskIdbyLoanClone(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _loanIdByTaker(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    _loansDemandCounter(overrides?: CallOverrides): Promise<BigNumber>;

    _loansOfferedCounter(overrides?: CallOverrides): Promise<BigNumber>;

    _loansTradedById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _loansTradedCounter(overrides?: CallOverrides): Promise<BigNumber>;

    acceptOffer(
      _config: TradeConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cancelTaskbyId(
      _taskId: BytesLike,
      loanContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkerStopStream(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    demandLoan(
      config: DemandConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gelato(overrides?: CallOverrides): Promise<BigNumber>;

    getMaths(
      _loanAmount: BigNumberish,
      _fee: BigNumberish,
      _duration: BigNumberish,
      _collateralShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerLoan(
      config: OfferConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ops(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stopStream(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AcceptDemand(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _gelatoTaskIdbyLoanClone(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _loanIdByTaker(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _loansDemandCounter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _loansOfferedCounter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _loansTradedById(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _loansTradedCounter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptOffer(
      _config: TradeConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cancelTaskbyId(
      _taskId: BytesLike,
      loanContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkerStopStream(
      loanId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    demandLoan(
      config: DemandConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gelato(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMaths(
      _loanAmount: BigNumberish,
      _fee: BigNumberish,
      _duration: BigNumberish,
      _collateralShare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerLoan(
      config: OfferConfigStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ops(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stopStream(
      loanId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawContract(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
